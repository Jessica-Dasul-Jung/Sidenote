emacs --version: shows you the version
-- to distinguish from -
-: lots of option
--: one option

ex) brew --version
  to check the version of the program

04/09/2018
Bash:
#!/bin/bash
./: current directory
if we do not specify the path, the terminal will search through path variables to find a match
relative path: ex) ./a.sh: try to execute the specify the program and run it
chmod 777 a.sh

var=ls;
echo var //prints ls

var='ls'
echo var //performs ls command

echo " $var is good $varr " //prints test2.txt (var command) is good 2 (varr variable)
backslash special character: ignores special property

echo " $var is good $varr"'kkjkj'" //prints test2.txt is good 2kkjkj
echo ' $var is good $varr '//dont

speical variables:
path variable: $
home variable

taking input from the command line:
echo $0 //exists in bash program, prints the name of the program
$0: gives you the first argument you put into the argument 
  could give you absolute path, or ./a.sh
./a.sh 100
echo $1 //represents second argument = first argument of the program - prints 100
cat $1
./a.sh text.txt
aaa
bbb
ccc

echo $# //how many arguments the user inputs - FINALFINALFINAL - does not include $0
./a.sh test.txt sdfsd
gives 2

./a.sh test.txt *
gives 14 (wildcard will put everything in a list)


echo $* //nothing since no argument

./a.sh kkjk 1221
prints kkjk 1221 //echo $*: prints out every argument - built in

exit 0 //standard exit
exit

input:
read a
echo a
it will wait for the input: will echo exact same thing


bash scripting

if [3 > 25] //gives true:
consider this as string, 3>2 so gives true.
if [3 > 55] //gives true

if [3 -gt 5] //greater than
if [3 -eq 3] //equal to
-gt: greater than
-lt: less than
-ge: greater than or equal
-le: less than or equal
need space

function t () {
  echo "test"
  echo $1 //first argument
}

t "arg1" "arg2"

function t () {
  echo $#
}

var=$0 //name of the function
t "arg1" "arg2" $var

function t {
  echo $0
  return "return var"
}
echo $t

echo ${#var} //length of var

Assume Assume Assume
Assume match with ^Assume$
abz match with a.z and a[abc]z
abbz happens with a..z
acz match with a[abc]z
aabcz does not match with a[abc]z
a[^abc]z -> match a.z since complement of ^abc, nothing of abc match
a1z : match with a[0-9]z
to put multiple things, need another bracket
a1dz - for a[0-9][a-z]
use \ to make something unspecial
a[z //match with a\[z
a.z //match with a\.z

a2z : match with a\dz \d: digit
agggggggz match with a[a-g]*z and a[a-g]+z
agggz match with a[a-g]*z and a[a-g]+z
agggbbz match with a[a-g]*z and a[a-g]+z (+: 1+) and a[a-g]{5}z (5 in between)
az match with a[a-g]*z (can have nothing)

agggggggggz : does not match with a[a-g]{5,8}z
aggggggggz : match with a[a-g]{5,8}z

(abc): want to group
abcabcabcabcabc : match with (abc){5} repeat abc 5 times

sed 's/cat/dog/file.txt' replace dog with cat in file.txt
sed "s/b/a" test.txt : change the first occurrence of b to a
sed "s/b/a/g" test.txt : change the all occurrences of b to a

try using ^ and $ option
* in the beginning does not make sense: preceding expression infinite
* at the end: infinite- all match (can have zero)
.*i: match
ls | sed "s:^:'pwd'/:g" - inputting


Python:
<if statement>
if condition:
  statement 1
  statement 2
  statement 3

statement
use indentation to separate blocks
d


git commit -m "First commit"
git add . : to add all files
git add all: alternative

all the modified files will be added to the staging area

touch b.txt
echo "Test" > b.txt
git status
b is untracked

do not track binary
you will make a new binary
new compilation
git will store new binary
git tracks the difference by comparing the text between two files
text file only
never want to track /add binary files

nano .gitigonore
add stuff that you do not want to stage/add

2>: standard output


git checkout -- a.txt : discard changes
git reset: force my repository to the previous state
git reset --hard

git pull: to see all the stuff you have is updated
git push: after you are done

final:
branching and merge

git fetch: copy the remote branch into local computer

Final:
  slide
  assignment

week 1: no emacs
every command that appears in the slide/assignment might appear on the final
Of the files in teh same directory as find, how many of them are not symbolic links?
print out all your assignments and answers
twist of assignment questions

pay attention to shell scripting
how to do calculation in shell script
correct form for shell script
go to home directory and check every single file inside a home ddirectory and see if the length of their name
is two character long without using wildcard and shellscript
sed
regex...

will not test you on patch
will not test you to verify the signature of the file

week 3: python
not installing a small change to a big package
python:
read the sample final = similar format
exact step to do that
in python2
read arguments from the command
need to open/close file
write a function
(not sure about class)
know how to handle list and dictionary
how to import module
import module_name
pip?? python package management tool: in the note
will not test...pip
---15 pts---

SSH:
how a public system works - copy the picture from the slide
knowledge of ssh command
how you create a public/private key pair
how to ssh into a server
general questions
not worth a lot
will not test digital signature
procedure to connect to other's beaglebone

git:
cover little about git
create a file and commit it and revert it and do another commit
push to the server, merge and stuff
list of commands i will test on git - understand how to use each of those
option f for commit, do not have to remember all options

rest: C
no C debugging: no GDB
no debugging related stuff

some 40 pt question on C programming: 
1. linking - write Makefile
2. system call using C instead of library
3. multithreaded programming

2 question on C on 3 topics above - 18 ~ 20 points


concept question:
can be ssh, sth related to c, interpreter, compiler...
python/bash use interpreters
c requires compiler
java in the middle (not tested)
do not have to write a lot
at the beginning of the test

dynamic linking







know how to make Makefile
d
d
d




