3.60

F)
long loop (long x, long n)
{
  long result = 0;
  long mask;
  for (mask = 1; mask != 0; mask = mask << n) {
    result |= (x & mask);
  }
  return result;
}

A) 
  x: %rdi
  n: %esi
  result: %rax
  mask: %rdx
B) 
  result = 0
  mask = 1
C) test condition: mask != 0
D) mask gets updated: mask = mask << n;
E) result gets updated: result = result | (x & mask);

3.63

long switch_prob (long x, long n)
{
  long result = x;
  switch (n) {
    case 60:
    case 62:
      result = x * 8;
      break;
    case 63:
      result = x >> 3;
      break;
    case 64:
      result = x << 4;
      result -= x;
    case 65:
      x = x * x;
      break;
    default:
      result = x + 75;
  }
  return result;
}


3.65
A) addq &8, %rdx
B) addq $120, %rax
C) M = 15


5.17
void *basic_memset (void *s, unsigned long c, size_t n)
{
  size_t K = sizeof (unsigned long);
  size_t cnt = 0;
  unsigned char *schar = s;
  while (cnt < n)
  {
    if ((size_t) schar % K == 0)
      break;
    *schar++ = (unsigned char) c;
    cnt++;
  }
  
  schar = (unsigned char*) slong;
  for (; cnt + K < n; cnt += K)
    *slong++ = c;
  
  schar = (unsigned char*) slong;
  for (; cnt < n; cnt++)
    *schar++ = (unsigned char) c;
  
  return s;
}















